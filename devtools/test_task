#!/usr/bin/python
import os
import sys
import json
import getopt
import docker
import difflib

def run_task(task, inputdata):
    # Define memory limits
    mem_limit = task["limits"]["memory"]
    if mem_limit < 20:
        mem_limit = 20
    elif mem_limit > 500:
        mem_limit = 500

    # Create container and fetch container id
    response = dock.create_container('inginious/' + task['environment'], command='INGInious --debug', stdin_open=True, network_disabled=True, volumes={'/ro/task': {}}, mem_limit=mem_limit * 1024 * 1024)
    container_id = response["Id"]
    
    # Start the container
    dock.start(container_id, binds={os.path.abspath(taskdir): {'ro': True, 'bind': '/ro/task'}})
    dock.attach_socket(container_id, {'stdin': 1, 'stream': 1}).send(json.dumps(inputdata) + "\n")
    dock.wait(container_id)
    
    # Get the std outputs
    stdout = str(dock.logs(container_id, stdout=True, stderr=False))
    stderr = str(dock.logs(container_id, stdout=False, stderr=True))
    
    # Delete used containers to avoid using too much disk space
    dock.remove_container(container_id, True, False, True)
    return stdout,stderr

def usage():
    print "Usage : test_task [-v|--verbose] [-i|--input-dir ]input_folder [-o|--output-dir ]output_folder task_folder"
    print "Verbose mode prints the entire standard output from the task"
    sys.exit(1)

# We need to be sudo to run docker
euid = os.geteuid()
if euid != 0:
    print "Script not started as root. Exiting..."
    exit(2)

# Read arguments from the command line
try:
    opts, args = getopt.getopt(sys.argv[1:], 'i:o:v', ['input-dir=', 'output-dir=', 'verbose'])
    if not args:
        usage()
except getopt.GetoptError,e:
    print e
    sys.exit(1)

inputdir = ''
outputdir = ''
verbose = False

for opt, arg in opts:
    if opt in ('-i', '--input-dir'):
        inputdir = arg
    elif opt in ('-o', '--output-dir'):
        outputdir = arg
    elif opt in ('-v', '--verbose'):
        verbose = True

taskdir=args[0]

if not inputdir:
    inputdir = args[0] + '/tests/in'
    
if not outputdir:
    outputdir = args[0] + '/tests/out'

# Do the real stuff

#Open the taskfile
try:
    taskfile = open(taskdir + '.task', 'r')
except IOError, e:
    print e
    exit(2)
task = json.load(taskfile)
limits = task['limits']

# List inputfiles
inputfiles = os.listdir(inputdir)

dock = docker.Client(base_url='unix://var/run/docker.sock')

i=1
for filename in inputfiles:
    print  '\x1b[34;1m[' + str(i) + '/' + str(len(inputfiles)) + ']' + " Testing input file : " + filename + '\033[0m'
    
    # Open the input file and merge with limits
    try:
        inputfile = open(inputdir + '/' + filename, 'r')
    except IOError, e:
        print e
        exit(2)
    inputdata = json.load(inputfile)
    inputdata['limits'] = limits
    
    # Run the task
    stdout,stderr = run_task(task, inputdata)
    
    if stderr:
        print  '\x1b[31;1m' + stderr + '\033[0m'
    
    # Open both JSON
    result = json.loads(stdout.strip('\0\n '))
    try:
        outputfile = open(outputdir + '/' + filename, 'r')
        outputdata = json.load(outputfile)
    except IOError, e:
        print "Error while loading output file"
        outputdata = {}
    
    # Print stdout if verbose
    if verbose:
        print  '\x1b[1m-> Complete standard output : \033[0m'
        for line in result['stdout'].splitlines(1):
            print '\t' + line.strip('\n')
    
    # Start the comparison
    noprob = True
    
    if 'stderr' in result and result['stderr']:
        noprob = False
        print  '\x1b[31;1m-> There was some error(s) during execution : \033[0m'
        for line in result['stderr'].splitlines(1):
            print  '\x1b[31;1m\t' + line.strip('\n') + '\033[0m'

    if 'stdout' in outputdata:
        if outputdata['stdout'] != result['stdout']:
            noprob = False
            print "\033[1m-> Standard output doesn't match :\033[0m"
            for line in difflib.unified_diff(outputdata['stdout'].splitlines(1),result['stdout'].splitlines(1), fromfile='Expected', tofile='Actual'):
                print '\t' + line.strip('\n')
    
    if 'result' in outputdata:
        if outputdata['result'] != result['result']:
            noprob = False
            print "\033[1m-> Result doesn't match :\033[0m"
            print "\t Expected result : " + outputdata['result']
            print "\t Actual result : " + result['result']
    
    if 'text' in outputdata:
        if not 'text' in result:
            noprob = False
            print "\033[1m-> No global feedback given \033[0m"
            print "\t Expected result : " + outputdata['text']
        elif outputdata['text'] != result['text']:
            noprob = False
            print "\033[1m-> Global feedback doesn't match :\033[0m"
            print "\t Expected result : " + outputdata['text']
            print "\t Actual result : " + result['text']
    
    if 'problems' in outputdata:
        if not 'problems' in result:
            noprob = False
            print "\033[1m-> No specific problem feedback given as expected \033[0m"
        else:
            for problem in outputdata['problems']:
                if not problem in result['problems']:
                    noprob = False
                    print "\033[1m-> No feedback for problem id " +problem + " given \033[0m"
                    print "\t Expected result : " + outputdata['problems'][problem]
                elif outputdata['problems'][problem] != result['problems'][problem]:
                    noprob = False
                    print "\033[1m-> Feedback for problem id " +problem + " doesn't match :\033[0m"
                    print "\t Expected result : " + outputdata['problems'][problem]
                    print "\t Actual result : " + result['problems'][problem]
                
    if 'tests' in outputdata:
        if not 'tests' in result:
            noprob = False
            print "\033[1m-> No tests results given as expected \033[0m"
        else:
            for tag in outputdata['tests']:
                if not tag in result['tests']:
                    noprob = False
                    print "\033[1m-> No test result with tag '" + tag + "' given \033[0m"
                    print "\t Expected result : " + outputdata['tests'][tag]
                elif outputdata['tests'][tag] != result['tests'][tag]:
                    noprob = False
                    print "\033[1m-> Test with tag '" + tag + "' failed :\033[0m"
                    print "\t Expected result : " + outputdata['tests'][tag]
                    print "\t Actual result : " + result['tests'][tag]
    
    if noprob:
        print "\033[32;1m-> All tests passed \033[0m"
    
    i = i+1
